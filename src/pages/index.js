import Head from "next/head";

import { Inter, Island_Moments } from "next/font/google";
import styles from "@/styles/Home.module.css";
import axios from "axios";
const inter = Inter({ subsets: ["latin"] });
import { useContext, useEffect, useState} from "react";
import {
  Container,
  Stack,
  Input,
  Button,
  SimpleGrid,
  Flex,
  Box,
  Modal,
  ModalOverlay,
  ModalHeader,
  ModalBody,
  ModalContent,
  ModalCloseButton,
  useDisclosure,
  background,
  Text,
} from "@chakra-ui/react";
import PokemonCard from "@/components/PokemonCard";
import PokemonData from "@/components/PokemonData";
import db from '../../db.json';



export default function Home() {
  const pokemonDataModal = useDisclosure();
  const pokemonCatchedModal = useDisclosure();
  const [isLoading, setIsLoading] = useState(false);
  const [pokemon, setPokemon] = useState([]);
  const [selectedPokemon, setSelectedPokemon] = useState();
  const [offset, setOffset] = useState(0)
  const [currentPage, setCurrentPage] = useState(
    `https://pokeapi.co/api/v2/pokemon/?limit=10&offset=${offset}`
  );
  
  let pokemonesatrapados = useState(db)  
  const [catchedPokemon] = pokemonesatrapados
  const [pokemonescatched, setpokemonescatched] = useState(catchedPokemon)
  const [pokemonAtrapado, setPokemonAtrapado] = useState("");

  function removeJsonAttr(data) {
    const indextoremove = pokemonescatched.findIndex((pl) => pl.id === data.id);
    catchedPokemon.splice(indextoremove, 1);  
  }

  function liberarTodos() {
    const borrados = pokemonescatched.splice(0, pokemonescatched.length);;
    pokemonCatchedModal.onClose();
    setTimeout(() => {
      pokemonCatchedModal.onOpen();
    }, "5");
  }
  
   function unCatched(data){
    console.log("yo te suelto " + data.name);
    removeJsonAttr(data);
    pokemonCatchedModal.onClose();
    setTimeout(() => {
      pokemonCatchedModal.onOpen();
    }, "5");
  }

  useEffect(() => {
    setIsLoading(true);
    axios.get(currentPage).then(async ({ data }) => {
      const promises = data.results.map((result) => axios(result.url));
      const fetchedPokemon = (await Promise.all(promises)).map(
        (res) => res.data
      );
      setPokemon((prev) => [...prev, ...fetchedPokemon]);
      setIsLoading(false);
      console.log(data);
    });

  }, [currentPage]);

  function show(data) {
    console.log(`Nombre: ${data.name} (${data.id})`)
    console.log(pokemonescatched);
  }

  function handleNextPage() {
    setOffset(offset+10);
    setCurrentPage(`https://pokeapi.co/api/v2/pokemon/?limit=10&offset=${offset}`)
  }

  function showPokemonCatched() {
    show(catchedPokemon); 
    pokemonCatchedModal.onOpen();
    setPokemonAtrapado(catchedPokemon); 
  }

  function handleViewPokemon(pokemon) {
    setSelectedPokemon(pokemon);
    pokemonDataModal.onOpen();
  }

  const sumapokemones = catchedPokemon.map(item =>
    item.quantity);

  const pokemonestotales = catchedPokemon.reduce((prev, next)=> prev + next, 0);

  return (
    <>
      <Head>
        <title>Pokemon Challenge</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex alignItems="center" minH="100vh" justifyContent="center">
        <Container maxW="container.lg">
          
          <Stack p="5" alignItems="center" spacing="5">
          <Button colorScheme={pokemonestotales == 0 ?`blackAlpha` :`pink`} disabled="yes" variant='solid' isLoading={false} onClick={showPokemonCatched}>
              {pokemonestotales == 0 ?`Sin Pokemones Atrapados` :`Ver pokemones atrapados`}
            </Button>
            <SimpleGrid spacing="5" columns={{ base: 3, md: 5 }}>
              {pokemon.map((pokemon) => (
                <Box
                  as="button"
                  key={pokemon.id}
                  onClick={() => handleViewPokemon(pokemon)}
                >
                  <PokemonCard pokemon={pokemon} />
                </Box>
              ))}
            </SimpleGrid>
            <Button isLoading={false} onClick={handleNextPage}>
              Ver m√°s Pokemones 
            </Button>

          </Stack>
        </Container>
      </Flex>
      <Modal {...pokemonDataModal}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader textTransform="capitalize">
            {selectedPokemon?.name}
          </ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            {selectedPokemon && <PokemonData pokemon={selectedPokemon} />}
          </ModalBody>
        </ModalContent>
      </Modal>
      <Modal {...pokemonCatchedModal}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader textTransform="capitalize">
            {'Pokemones Atrapados'}
          </ModalHeader>
          <ModalCloseButton />
          <ModalBody>
          <div className="posts">
            {
             pokemonescatched.map(poke => <div> <Text mt={4} key={poke.id} display="inline-block" fontSize='xl'>{poke.name}</Text> <Button onClick={() =>unCatched(poke)}>Liberar</Button></div>)
            }
            {
              <Button colorScheme={"green"} display={pokemonestotales == 0 ?`block` :`none`} disabled={true} onClick={() => pokemonCatchedModal.onClose()}>Volver a atrapar pokemones</Button>

            }
            <Button mt={2} variant='outline' colorScheme={"pink"} display={!pokemonestotales == 0 ?`block` :`none`} onClick={() =>liberarTodos()}>Liberar todos los pokemones</Button>
      </div>
          </ModalBody>
        </ModalContent>
      </Modal>
    </>
  );
 } 
